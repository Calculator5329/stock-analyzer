{"version":3,"file":"static/js/793.5fa7550e.chunk.js","mappings":"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","sources":["components/PortfolioTracker.js"],"sourcesContent":["import React, { useState, useEffect, useMemo } from 'react';\nimport { \n  PieChart, \n  Pie, \n  Cell, \n  Tooltip, \n  ResponsiveContainer,\n  AreaChart,\n  Area,\n  XAxis,\n  YAxis,\n  CartesianGrid,\n  Legend\n} from 'recharts';\nimport './PortfolioTracker.css';\n\nconst COLORS = ['#00bfff', '#32cd32', '#ffdf00', '#ff4d4d', '#7c3aed', '#14b8a6', '#c026d3', '#e11d48'];\n\n// Current price fetching remains, as it's for live data, not backtesting.\nconst API_ENDPOINTS = [\n  {\n    name: 'Yahoo Finance',\n    url: (symbol) => `https://query1.finance.yahoo.com/v7/finance/quote?symbols=${symbol}`,\n    extractPrice: (data) => data.quoteResponse?.result?.[0]?.regularMarketPrice || 0\n  },\n  {\n    name: 'Alpha Vantage (Demo)',\n    url: (symbol) => `https://www.alphavantage.co/query?function=GLOBAL_QUOTE&symbol=${symbol}&apikey=demo`,\n    extractPrice: (data) => parseFloat(data['Global Quote']?.['05. price']) || 0\n  }\n];\n\nconst fetchPrice = async (symbol) => {\n  for (const endpoint of API_ENDPOINTS) {\n    try {\n      console.log(`Trying ${endpoint.name} for ${symbol}...`);\n      const response = await fetch(endpoint.url(symbol));\n      if (!response.ok) {\n        console.warn(`${endpoint.name} failed for ${symbol}: ${response.status}`);\n        continue;\n      }\n      \n      const data = await response.json();\n      const price = endpoint.extractPrice(data);\n      \n      if (price > 0) {\n        console.log(`Successfully fetched price for ${symbol}: $${price} from ${endpoint.name}`);\n        return price;\n      }\n    } catch (error) {\n      console.warn(`Error fetching from ${endpoint.name}:`, error);\n      continue;\n    }\n  }\n  \n  console.error(`Failed to fetch price for ${symbol} from all APIs`);\n  return 0;\n};\n\nconst historicalDataCache = {};\n\n// New function to fetch historical data from local JSON files\nconst fetchHistoricalData = async (symbol) => {\n  if (historicalDataCache[symbol]) {\n    return historicalDataCache[symbol];\n  }\n\n  try {\n    const response = await fetch(`${process.env.PUBLIC_URL}/stock-data/${symbol}.json`);\n    if (!response.ok) {\n      console.warn(`Could not find local data for ${symbol}. Status: ${response.status}`);\n      return null;\n    }\n    const data = await response.json();\n    \n    // Transform data to the expected format\n    const transformedData = data.map(item => ({\n      date: new Date(item.Date).toISOString().split('T')[0], // Standardize date format\n      close: item.Close\n    })).filter(item => item.close > 0);\n\n    historicalDataCache[symbol] = transformedData;\n    return transformedData;\n\n  } catch (error) {\n    console.error(`Error loading local historical data for ${symbol}:`, error);\n    return null;\n  }\n};\n\n\nconst PortfolioTracker = () => {\n  const [holdings, setHoldings] = useState(() => {\n    try {\n      const saved = localStorage.getItem('portfolio');\n      return saved ? JSON.parse(saved) : [];\n    } catch (error) {\n      console.error('Error loading portfolio from localStorage:', error);\n      return [];\n    }\n  });\n  const [newHolding, setNewHolding] = useState({ symbol: '', shares: '' });\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState('');\n  const [backtestData, setBacktestData] = useState([]);\n  const [backtestLoading, setBacktestLoading] = useState(false);\n  const [backtestPeriod, setBacktestPeriod] = useState('1y');\n  const [showBacktest, setShowBacktest] = useState(false);\n  const [backtestDateRange, setBacktestDateRange] = useState(null);\n\n  useEffect(() => {\n    try {\n      localStorage.setItem('portfolio', JSON.stringify(holdings));\n    } catch (error) {\n      console.error('Error saving portfolio to localStorage:', error);\n    }\n  }, [holdings]);\n\n  const addHolding = async () => {\n    const symbol = newHolding.symbol.toUpperCase().trim();\n    const shares = Number(newHolding.shares);\n    \n    if (!symbol) {\n      setError('Please enter a stock symbol');\n      return;\n    }\n    \n    if (shares <= 0 || isNaN(shares)) {\n      setError('Please enter a valid number of shares');\n      return;\n    }\n\n    if (holdings.some(h => h.symbol === symbol)) {\n      setError('This stock is already in your portfolio');\n      return;\n    }\n\n    setError('');\n    setLoading(true);\n    \n    try {\n      let price = await fetchPrice(symbol);\n\n      if (price <= 0) {\n        console.log(`Live price fetch failed for ${symbol}. Trying local historical data as fallback.`);\n        const historicalData = await fetchHistoricalData(symbol);\n        if (historicalData && historicalData.length > 0) {\n          price = historicalData[historicalData.length - 1].close;\n          console.log(`Using latest price from local data for ${symbol}: $${price}`);\n        }\n      }\n      \n      if (price > 0) {\n        const newHoldingData = { symbol, shares, price };\n        setHoldings(prev => [...prev, newHoldingData]);\n        setNewHolding({ symbol: '', shares: '' });\n        console.log(`Added ${symbol}: ${shares} shares at $${price}`);\n      } else {\n        setError(`Could not fetch price for ${symbol}. Please check the symbol and the local data file.`);\n      }\n    } catch (error) {\n      console.error('Error adding holding:', error);\n      setError('Failed to add stock. Please try again.');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const deleteHolding = (idx) => {\n    setHoldings(prev => prev.filter((_, i) => i !== idx));\n  };\n\n  const updatePrices = async () => {\n    setLoading(true);\n    setError('');\n    \n    try {\n      const updatedHoldings = await Promise.all(\n        holdings.map(async (holding) => {\n          const newPrice = await fetchPrice(holding.symbol);\n          return { ...holding, price: newPrice > 0 ? newPrice : holding.price };\n        })\n      );\n      \n      setHoldings(updatedHoldings);\n      console.log('Updated all stock prices');\n    } catch (error) {\n      console.error('Error updating prices:', error);\n      setError('Failed to update prices. Please try again.');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const runBacktest = async () => {\n    if (holdings.length === 0) {\n      setError('Please add some stocks to your portfolio first');\n      return;\n    }\n\n    setBacktestLoading(true);\n    setError('');\n    setShowBacktest(false);\n    \n    try {\n      // Fetch historical data from local files\n      const historicalDataPromises = holdings.map(async (holding) => {\n        const data = await fetchHistoricalData(holding.symbol);\n        return { symbol: holding.symbol, data, shares: holding.shares };\n      });\n\n      const historicalResults = await Promise.all(historicalDataPromises);\n      const validResults = historicalResults.filter(result => result.data && result.data.length > 0);\n\n      if (validResults.length === 0) {\n        setError('Could not load local historical data for any of your stocks. Please ensure the JSON files exist in /public/stock-data/.');\n        setBacktestLoading(false);\n        return;\n      }\n\n      if (validResults.length < holdings.length) {\n        const failedSymbols = holdings.filter(h => !validResults.find(r => r.symbol === h.symbol)).map(h => h.symbol);\n        setError(`Warning: Could not load local data for ${failedSymbols.join(', ')}. Backtest will run with the remaining stocks.`);\n      }\n\n      // Determine start date based on selected period\n      const getStartDate = (period, results) => {\n        const now = new Date();\n        \n        if (period === 'max') {\n          let latestStartDate = null;\n          results.forEach(res => {\n            if (res.data && res.data.length > 0) {\n              // Data is sorted chronologically, so the first entry is the earliest\n              const stockStartDate = new Date(res.data[0].date);\n              if (!latestStartDate || stockStartDate > latestStartDate) {\n                latestStartDate = stockStartDate;\n              }\n            }\n          });\n          // Fallback to 1 year if no date could be determined\n          return (latestStartDate || new Date(new Date().setFullYear(now.getFullYear() - 1))).toISOString().split('T')[0];\n        }\n        \n        const yearsMap = { '1y': 1, '5y': 5, '10y': 10, '20y': 20 };\n        const yearsToSubtract = yearsMap[period] || 1;\n        const past = new Date();\n        past.setFullYear(now.getFullYear() - yearsToSubtract);\n        return past.toISOString().split('T')[0];\n      };\n\n      const startDate = getStartDate(backtestPeriod, validResults);\n\n      const filteredResults = validResults.map(result => ({\n        ...result,\n        data: result.data.filter(item => item.date >= startDate)\n      })).filter(result => result.data.length > 0);\n\n\n      const allDates = new Set();\n      filteredResults.forEach(result => {\n        result.data.forEach(item => allDates.add(item.date));\n      });\n      const sortedDates = Array.from(allDates).sort();\n\n      const portfolioHistory = sortedDates.map(date => {\n        let totalValue = 0;\n        let isMissingDataForDate = false;\n\n        for(const result of filteredResults) {\n          const dayData = result.data.find(item => item.date === date);\n          if (dayData && dayData.close > 0) {\n            totalValue += dayData.close * result.shares;\n          } else {\n            // Use last known price if a stock has a gap\n            const lastKnownData = result.data.slice().reverse().find(item => new Date(item.date) <= new Date(date) && item.close > 0);\n            if(lastKnownData) {\n              totalValue += lastKnownData.close * result.shares;\n            } else {\n              isMissingDataForDate = true;\n              break; \n            }\n          }\n        }\n        \n        if (isMissingDataForDate) return null;\n\n        return {\n          date,\n          totalValue: totalValue,\n          formattedDate: new Date(date).toLocaleDateString('en-US', { month: 'short', day: 'numeric', year: 'numeric' })\n        };\n      }).filter(item => item !== null && item.totalValue > 0);\n\n      if (portfolioHistory.length < 2) {\n        setError('Not enough historical data in the selected period to create a meaningful backtest. Try a longer period.');\n        setBacktestData([]);\n        setBacktestDateRange(null);\n      } else {\n        setBacktestData(portfolioHistory);\n        setShowBacktest(true);\n        \n        // Set the actual date range used in the backtest\n        const actualStartDate = portfolioHistory[0].date;\n        const actualEndDate = portfolioHistory[portfolioHistory.length - 1].date;\n        const requestedStartDate = startDate;\n        const isLimited = actualStartDate > requestedStartDate;\n        \n        setBacktestDateRange({\n          startDate: actualStartDate,\n          endDate: actualEndDate,\n          requestedStartDate: requestedStartDate,\n          isLimited: isLimited,\n          period: backtestPeriod\n        });\n        \n        console.log(`Backtest completed with ${portfolioHistory.length} data points`);\n      }\n    } catch (error) {\n      console.error('Error running backtest:', error);\n      setError('Failed to run backtest. Please try again.');\n    } finally {\n      setBacktestLoading(false);\n    }\n  };\n\n  const totalValue = useMemo(() => holdings.reduce((sum, h) => sum + h.price * h.shares, 0), [holdings]);\n  \n  const pieData = useMemo(() => {\n    if (totalValue === 0) return [];\n    return holdings.map(h => ({ \n      name: h.symbol, \n      value: h.price * h.shares,\n      percentage: ((h.price * h.shares) / totalValue * 100).toFixed(1)\n    }));\n  }, [holdings, totalValue]);\n\n  const formatCurrency = (value, digits = 2) => {\n    return new Intl.NumberFormat('en-US', {\n      style: 'currency',\n      currency: 'USD',\n      minimumFractionDigits: digits,\n      maximumFractionDigits: digits\n    }).format(value);\n  };\n\n  const performance = useMemo(() => {\n    if (backtestData.length < 2) return null;\n    \n    const initialValue = backtestData[0].totalValue;\n    const finalValue = backtestData[backtestData.length - 1].totalValue;\n    const totalReturn = ((finalValue - initialValue) / initialValue) * 100;\n    \n    const days = (new Date(backtestData[backtestData.length - 1].date) - new Date(backtestData[0].date)) / (1000 * 60 * 60 * 24);\n    if (days === 0) return null;\n    \n    let annualizedReturn;\n    if (backtestPeriod === '1y') {\n      annualizedReturn = totalReturn;\n    } else {\n      annualizedReturn = ((finalValue / initialValue) ** (365 / days) - 1) * 100;\n    }\n    \n    return {\n      totalReturn: totalReturn.toFixed(2),\n      annualizedReturn: annualizedReturn.toFixed(2),\n      initialValue,\n      finalValue,\n      gain: finalValue - initialValue\n    };\n  }, [backtestData, backtestPeriod]);\n\n  return (\n    <div className=\"portfolio-tracker\">\n      <div className=\"pt-header\">\n        <h1>Portfolio Tracker</h1>\n        <p>Track your investment portfolio performance with historical backtesting</p>\n      </div>\n      \n      <div className=\"pt-main-content\">\n        {error && (\n          <div className=\"pt-error\">\n            {error}\n          </div>\n        )}\n\n        <div className=\"pt-inputs\">\n          <input\n            type=\"text\"\n            placeholder=\"Stock Symbol (e.g., AAPL)\"\n            value={newHolding.symbol}\n            onChange={e => setNewHolding({ ...newHolding, symbol: e.target.value })}\n            onKeyPress={e => e.key === 'Enter' && addHolding()}\n          />\n          <input\n            type=\"number\"\n            placeholder=\"Number of Shares\"\n            value={newHolding.shares}\n            onChange={e => setNewHolding({ ...newHolding, shares: e.target.value })}\n            onKeyPress={e => e.key === 'Enter' && addHolding()}\n            min=\"0\"\n            step=\"1\"\n          />\n          <button onClick={addHolding} disabled={loading}>\n            {loading ? 'Adding...' : 'Add Stock'}\n          </button>\n        </div>\n\n        {holdings.length > 0 && (\n          <div className=\"pt-actions\">\n            <button onClick={updatePrices} disabled={loading || backtestLoading} className=\"pt-update-btn\">\n              {loading ? 'Updating...' : 'Update Prices'}\n            </button>\n            <div className=\"pt-backtest-controls\">\n            <label htmlFor=\"backtest-period\">Backtest Period:</label>\n              <div className=\"portfolio-input-group\">\n                \n                <select id=\"backtest-period\" value={backtestPeriod} onChange={e => setBacktestPeriod(e.target.value)}>\n                  <option value=\"1y\">1 Year</option>\n                  <option value=\"5y\">5 Years</option>\n                  <option value=\"10y\">10 Years</option>\n                  <option value=\"20y\">20 Years</option>\n                  <option value=\"max\">Max</option>\n                </select>\n              </div>\n              <button \n                onClick={runBacktest} \n                disabled={backtestLoading || loading} \n                className=\"pt-backtest-btn\"\n              >\n                {backtestLoading ? 'Running Backtest...' : 'Run Backtest'}\n              </button>\n            </div>\n          </div>\n        )}\n\n        <div className=\"pt-content-grid\">\n          <div className=\"pt-table\">\n            <h3>Your Holdings</h3>\n            <table>\n              <thead>\n                <tr>\n                  <th>Symbol</th>\n                  <th>Shares</th>\n                  <th>Price</th>\n                  <th>Value</th>\n                  <th></th>\n                </tr>\n              </thead>\n              <tbody>\n                {holdings.map((h, idx) => (\n                  <tr key={idx}>\n                    <td className=\"pt-symbol\">{h.symbol}</td>\n                    <td>{h.shares.toLocaleString()}</td>\n                    <td>{formatCurrency(h.price)}</td>\n                    <td>{formatCurrency(h.price * h.shares)}</td>\n                    <td>\n                      <button \n                        onClick={() => deleteHolding(idx)}\n                        className=\"pt-delete-btn\"\n                        title=\"Remove stock\"\n                        disabled={backtestLoading || loading}\n                      >\n                        ×\n                      </button>\n                    </td>\n                  </tr>\n                ))}\n              </tbody>\n            </table>\n          </div>\n\n          <div className=\"pt-chart\">\n            <h3>Portfolio Allocation</h3>\n            {pieData.length > 0 ? (\n              <>\n                <ResponsiveContainer width=\"100%\" height={300}>\n                  <PieChart>\n                    <Pie \n                      data={pieData} \n                      dataKey=\"value\" \n                      nameKey=\"name\" \n                      outerRadius={100} \n                      label={({ name, percentage }) => `${name} ${percentage}%`}\n                    >\n                      {pieData.map((entry, index) => (\n                        <Cell key={`cell-${index}`} fill={COLORS[index % COLORS.length]} />\n                      ))}\n                    </Pie>\n                    <Tooltip \n                      formatter={(value) => formatCurrency(value, 2)}\n                      labelFormatter={(label) => label}\n                    />\n                  </PieChart>\n                </ResponsiveContainer>\n                <p className=\"pt-total\">Total Portfolio Value: {formatCurrency(totalValue, 0)}</p>\n              </>\n            ) : (\n              <div className=\"pt-empty\">\n                <p>No stocks in your portfolio yet.</p>\n                <p>Add some stocks above to get started!</p>\n              </div>\n            )}\n          </div>\n        </div>\n\n        {showBacktest && backtestData.length > 0 && (\n          <div className=\"pt-backtest-section\">\n            <h3>Historical Performance ({backtestPeriod})</h3>\n            \n            {backtestDateRange && (\n              <div className={`pt-date-range-note ${backtestDateRange.isLimited ? 'limited' : ''}`}>\n                <span className=\"pt-date-range-icon\">📅</span>\n                <span>\n                  {backtestDateRange.isLimited ? (\n                    <>\n                      <strong>Limited by available data:</strong> Backtest runs from{' '}\n                      {new Date(backtestDateRange.startDate).toLocaleDateString('en-US', { \n                        year: 'numeric', \n                        month: 'short', \n                        day: 'numeric' \n                      })} to{' '}\n                      {new Date(backtestDateRange.endDate).toLocaleDateString('en-US', { \n                        year: 'numeric', \n                        month: 'short', \n                        day: 'numeric' \n                      })}\n                    </>\n                  ) : (\n                    <>\n                      Backtest period: {new Date(backtestDateRange.startDate).toLocaleDateString('en-US', { \n                        year: 'numeric', \n                        month: 'short', \n                        day: 'numeric' \n                      })} to{' '}\n                      {new Date(backtestDateRange.endDate).toLocaleDateString('en-US', { \n                        year: 'numeric', \n                        month: 'short', \n                        day: 'numeric' \n                      })}\n                    </>\n                  )}\n                </span>\n              </div>\n            )}\n\n            {performance && (\n              <div className=\"pt-performance-summary\">\n                <div className=\"pt-performance-card\">\n                  <span className=\"pt-performance-label\">Total Return</span>\n                  <span className={`pt-performance-value ${performance.totalReturn >= 0 ? 'positive' : 'negative'}`}>\n                    {performance.totalReturn >= 0 ? '+' : ''}{performance.totalReturn}%\n                  </span>\n                </div>\n                <div className=\"pt-performance-card\">\n                  <span className=\"pt-performance-label\">Annualized Return</span>\n                  <span className={`pt-performance-value ${performance.annualizedReturn >= 0 ? 'positive' : 'negative'}`}>\n                    {performance.annualizedReturn >= 0 ? '+' : ''}{performance.annualizedReturn}%\n                  </span>\n                </div>\n              </div>\n            )}\n\n            <div className=\"pt-backtest-chart\">\n              <ResponsiveContainer width=\"100%\" height={400}>\n                <AreaChart data={backtestData}>\n                  <CartesianGrid strokeDasharray=\"3 3\" stroke=\"rgba(255,255,255,0.1)\" />\n                  <XAxis \n                    dataKey=\"formattedDate\" \n                    tick={{ fill: '#ccc' }}\n                    interval=\"preserveStartEnd\"\n                  />\n                  <YAxis \n                    tick={{ fill: '#ccc' }} \n                    tickFormatter={(value) => formatCurrency(value, 0)}\n                    domain={['dataMin', 'dataMax']}\n                  />\n                  <Tooltip \n                    formatter={(value) => formatCurrency(value, 2)}\n                    labelFormatter={(label) => `Date: ${label}`}\n                  />\n                  <Legend />\n                  <Area \n                    type=\"monotone\" \n                    dataKey=\"totalValue\" \n                    name=\"Portfolio Value\" \n                    stroke=\"#00bfff\" \n                    fill=\"#00bfff\" \n                    fillOpacity={0.3}\n                  />\n                </AreaChart>\n              </ResponsiveContainer>\n            </div>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default PortfolioTracker; "],"names":["COLORS","API_ENDPOINTS","name","url","symbol","concat","extractPrice","data","_data$quoteResponse","_data$quoteResponse$r","_data$quoteResponse$r2","quoteResponse","result","regularMarketPrice","_data$GlobalQuote","parseFloat","fetchPrice","async","endpoint","console","log","response","fetch","ok","warn","status","json","price","error","historicalDataCache","fetchHistoricalData","process","transformedData","map","item","date","Date","toISOString","split","close","Close","filter","PortfolioTracker","holdings","setHoldings","useState","saved","localStorage","getItem","JSON","parse","newHolding","setNewHolding","shares","loading","setLoading","setError","backtestData","setBacktestData","backtestLoading","setBacktestLoading","backtestPeriod","setBacktestPeriod","showBacktest","setShowBacktest","backtestDateRange","setBacktestDateRange","useEffect","setItem","stringify","addHolding","toUpperCase","trim","Number","isNaN","some","h","historicalData","length","newHoldingData","prev","totalValue","useMemo","reduce","sum","pieData","value","percentage","toFixed","formatCurrency","digits","arguments","undefined","Intl","NumberFormat","style","currency","minimumFractionDigits","maximumFractionDigits","format","performance","initialValue","finalValue","totalReturn","days","annualizedReturn","gain","_jsxs","className","children","_jsx","type","placeholder","onChange","e","_objectSpread","target","onKeyPress","key","min","step","onClick","disabled","updatedHoldings","Promise","all","newPrice","holding","htmlFor","id","historicalDataPromises","validResults","failedSymbols","find","r","join","startDate","getStartDate","period","results","now","latestStartDate","forEach","res","stockStartDate","setFullYear","getFullYear","yearsToSubtract","past","filteredResults","allDates","Set","add","portfolioHistory","Array","from","sort","isMissingDataForDate","dayData","lastKnownData","slice","reverse","formattedDate","toLocaleDateString","month","day","year","actualStartDate","actualEndDate","endDate","requestedStartDate","isLimited","idx","toLocaleString","_","i","deleteHolding","title","_Fragment","ResponsiveContainer","width","height","PieChart","Pie","dataKey","nameKey","outerRadius","label","_ref","entry","index","Cell","fill","Tooltip","formatter","labelFormatter","AreaChart","CartesianGrid","strokeDasharray","stroke","XAxis","tick","interval","YAxis","tickFormatter","domain","Legend","Area","fillOpacity"],"sourceRoot":""}