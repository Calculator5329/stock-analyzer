{"version":3,"file":"static/js/555.0cd80d61.chunk.js","mappings":"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","sources":["components/MortgageCalculator.js"],"sourcesContent":["import React, { useState, useEffect, useCallback } from 'react';\nimport {\n  LineChart,\n  Line,\n  XAxis,\n  YAxis,\n  CartesianGrid,\n  Tooltip,\n  Legend,\n  ResponsiveContainer,\n  PieChart,\n  Pie,\n  Cell\n} from 'recharts';\nimport './MortgageCalculator.css';\n\nconst MortgageCalculator = () => {\n  const [loanAmount, setLoanAmount] = useState(400000);\n  const [interestRate, setInterestRate] = useState(6.5);\n  const [loanTerm, setLoanTerm] = useState(30);\n  const [downPayment, setDownPayment] = useState(80000);\n  const [propertyTaxRate, setPropertyTaxRate] = useState(1.1);\n  const [insuranceRate, setInsuranceRate] = useState(0.5);\n  const [pmiRate, setPmiRate] = useState(0.58);\n  const [hoaFees, setHoaFees] = useState(0);\n  const [result, setResult] = useState(null);\n  const [amortizationData, setAmortizationData] = useState([]);\n  const [yearlyData, setYearlyData] = useState([]);\n\n  const calculateMortgage = useCallback(() => {\n    const principal = parseFloat(loanAmount) || 0;\n    const monthlyRate = (parseFloat(interestRate) / 100) / 12;\n    const totalPayments = (parseFloat(loanTerm) || 0) * 12;\n    const downPaymentAmount = parseFloat(downPayment) || 0;\n    const homePrice = principal + downPaymentAmount;\n\n    // Calculate additional costs based on rates\n    const annualPropertyTax = homePrice * ((parseFloat(propertyTaxRate) || 0) / 100);\n    const monthlyPropertyTax = annualPropertyTax / 12;\n    \n    const annualInsurance = homePrice * ((parseFloat(insuranceRate) || 0) / 100);\n    const monthlyInsurance = annualInsurance / 12;\n\n    const loanToValue = homePrice > 0 ? (principal / homePrice) : 0;\n    const annualPmi = loanToValue > 0.8 ? principal * ((parseFloat(pmiRate) || 0) / 100) : 0;\n    const monthlyPmi = annualPmi / 12;\n\n    const monthlyHoa = parseFloat(hoaFees) || 0;\n\n    if (principal > 0 && monthlyRate > 0 && totalPayments > 0) {\n      // Calculate monthly payment (principal + interest)\n      const monthlyPayment = principal * (monthlyRate * Math.pow(1 + monthlyRate, totalPayments)) / \n                            (Math.pow(1 + monthlyRate, totalPayments) - 1);\n\n      // Total monthly payment including taxes, insurance, etc.\n      const totalMonthlyPayment = monthlyPayment + monthlyPropertyTax + monthlyInsurance + monthlyPmi + monthlyHoa;\n\n      // Calculate amortization schedule\n      const amortization = [];\n      const yearlyBreakdown = [];\n      let remainingBalance = principal;\n      let totalInterestPaid = 0;\n      let totalPrincipalPaid = 0;\n      let yearlyInterest = 0;\n      let yearlyPrincipal = 0;\n\n      for (let month = 1; month <= totalPayments; month++) {\n        const interestPayment = remainingBalance * monthlyRate;\n        const principalPayment = monthlyPayment - interestPayment;\n        remainingBalance -= principalPayment;\n        totalInterestPaid += interestPayment;\n        totalPrincipalPaid += principalPayment;\n        yearlyInterest += interestPayment;\n        yearlyPrincipal += principalPayment;\n\n        if (remainingBalance < 0) remainingBalance = 0;\n\n        amortization.push({\n          month,\n          year: Math.ceil(month / 12),\n          monthlyPayment: monthlyPayment,\n          principalPayment: principalPayment,\n          interestPayment: interestPayment,\n          remainingBalance: remainingBalance,\n          totalInterestPaid: totalInterestPaid,\n          totalPrincipalPaid: totalPrincipalPaid\n        });\n\n        // Add yearly summary\n        if (month % 12 === 0 || month === totalPayments) {\n          yearlyBreakdown.push({\n            year: Math.ceil(month / 12),\n            yearlyInterest: yearlyInterest,\n            yearlyPrincipal: yearlyPrincipal,\n            remainingBalance: remainingBalance,\n            totalInterestPaid: totalInterestPaid,\n            totalPrincipalPaid: totalPrincipalPaid\n          });\n          yearlyInterest = 0;\n          yearlyPrincipal = 0;\n        }\n      }\n\n      setAmortizationData(amortization);\n      setYearlyData(yearlyBreakdown);\n\n      const totalPaymentAmount = monthlyPayment * totalPayments;\n      const totalInterest = totalPaymentAmount - principal;\n\n      setResult({\n        homePrice: homePrice,\n        loanAmount: principal,\n        downPayment: downPaymentAmount,\n        monthlyPayment: monthlyPayment,\n        totalMonthlyPayment: totalMonthlyPayment,\n        monthlyPropertyTax: monthlyPropertyTax,\n        monthlyInsurance: monthlyInsurance,\n        monthlyPmi: monthlyPmi,\n        monthlyHoa: monthlyHoa,\n        totalPaymentAmount: totalPaymentAmount,\n        totalInterest: totalInterest,\n        loanToValue: loanToValue,\n        payoffDate: new Date(Date.now() + (totalPayments * 30 * 24 * 60 * 60 * 1000))\n      });\n    }\n  }, [loanAmount, interestRate, loanTerm, downPayment, propertyTaxRate, insuranceRate, pmiRate, hoaFees]);\n\n  useEffect(() => {\n    calculateMortgage();\n  }, [calculateMortgage]);\n\n  const pieData = result ? [\n    { name: 'Principal', value: result.loanAmount, color: '#00bfff' },\n    { name: 'Interest', value: result.totalInterest, color: '#ff6b6b' },\n    { name: 'Down Payment', value: result.downPayment, color: '#32cd32' }\n  ] : [];\n\n  const monthlyPieData = result ? [\n    { name: 'Principal & Interest', value: result.monthlyPayment },\n    { name: 'Property Tax', value: result.monthlyPropertyTax },\n    { name: 'Insurance', value: result.monthlyInsurance },\n    { name: 'PMI', value: result.monthlyPmi },\n    { name: 'HOA', value: result.monthlyHoa }\n  ].filter(item => item.value > 0) : [];\n\n  const MONTHLY_COLORS = ['#00bfff', '#ffdf00', '#32cd32', '#ff6b6b', '#9d4edd'];\n\n  const formatCurrency = (value) => {\n    return new Intl.NumberFormat('en-US', {\n      style: 'currency',\n      currency: 'USD',\n      minimumFractionDigits: 0,\n      maximumFractionDigits: 0\n    }).format(value);\n  };\n\n  const formatPercent = (value) => {\n    return `${value.toFixed(2)}%`;\n  };\n\n  const formatDate = (date) => {\n    return date.toLocaleDateString('en-US', { \n      year: 'numeric', \n      month: 'long' \n    });\n  };\n\n  return (\n    <div className=\"mortgage-calculator\">\n      <div className=\"mc-header\">\n        <h1>Mortgage Calculator</h1>\n        <p>Calculate your monthly payments and see the amortization schedule</p>\n      </div>\n\n      <div className=\"mc-main-content\">\n        {/* Left Panel - Inputs */}\n        <div className=\"mc-inputs-panel\">\n          <div className=\"mc-input-section\">\n            <h2>Loan Details</h2>\n            \n            <div className=\"mc-input-group\">\n              <label htmlFor=\"loanAmount\">Loan Amount</label>\n              <div className=\"mc-input-wrapper\">\n                <span className=\"mc-currency-symbol\">$</span>\n                <input\n                  id=\"loanAmount\"\n                  type=\"number\"\n                  value={loanAmount}\n                  onChange={(e) => setLoanAmount(e.target.value)}\n                  min=\"0\"\n                  step=\"1000\"\n                />\n              </div>\n            </div>\n\n            <div className=\"mc-input-group\">\n              <label htmlFor=\"downPayment\">Down Payment</label>\n              <div className=\"mc-input-wrapper\">\n                <span className=\"mc-currency-symbol\">$</span>\n                <input\n                  id=\"downPayment\"\n                  type=\"number\"\n                  value={downPayment}\n                  onChange={(e) => setDownPayment(e.target.value)}\n                  min=\"0\"\n                  step=\"1000\"\n                />\n              </div>\n            </div>\n\n            <div className=\"mc-input-group\">\n              <label htmlFor=\"interestRate\">Interest Rate</label>\n              <div className=\"mc-input-wrapper\">\n                <input\n                  id=\"interestRate\"\n                  type=\"number\"\n                  value={interestRate}\n                  onChange={(e) => setInterestRate(e.target.value)}\n                  min=\"0\"\n                  max=\"20\"\n                  step=\"0.01\"\n                />\n                <span className=\"mc-percent-symbol\">%</span>\n              </div>\n            </div>\n\n            <div className=\"mc-input-group\">\n              <label htmlFor=\"loanTerm\">Loan Term</label>\n              <div className=\"mc-input-wrapper\">\n                <input\n                  id=\"loanTerm\"\n                  type=\"number\"\n                  value={loanTerm}\n                  onChange={(e) => setLoanTerm(e.target.value)}\n                  min=\"1\"\n                  max=\"50\"\n                  step=\"1\"\n                />\n                <span className=\"mc-unit-symbol\">years</span>\n              </div>\n            </div>\n\n            <h2>Additional Costs</h2>\n\n            <div className=\"mc-input-group\">\n              <label htmlFor=\"propertyTaxRate\">Property Tax Rate</label>\n              <div className=\"mc-input-wrapper\">\n                <input\n                  id=\"propertyTaxRate\"\n                  type=\"number\"\n                  value={propertyTaxRate}\n                  onChange={(e) => setPropertyTaxRate(e.target.value)}\n                  min=\"0\"\n                  step=\"0.01\"\n                />\n                <span className=\"mc-percent-symbol\">%</span>\n              </div>\n            </div>\n\n            <div className=\"mc-input-group\">\n              <label htmlFor=\"insuranceRate\">Insurance Rate</label>\n              <div className=\"mc-input-wrapper\">\n                <input\n                  id=\"insuranceRate\"\n                  type=\"number\"\n                  value={insuranceRate}\n                  onChange={(e) => setInsuranceRate(e.target.value)}\n                  min=\"0\"\n                  step=\"0.01\"\n                />\n                <span className=\"mc-percent-symbol\">%</span>\n              </div>\n            </div>\n\n            <div className=\"mc-input-group\">\n              <label htmlFor=\"pmiRate\">PMI Rate</label>\n              <div className=\"mc-input-wrapper\">\n                <input\n                  id=\"pmiRate\"\n                  type=\"number\"\n                  value={pmiRate}\n                  onChange={(e) => setPmiRate(e.target.value)}\n                  min=\"0\"\n                  step=\"0.01\"\n                />\n                <span className=\"mc-percent-symbol\">%</span>\n              </div>\n            </div>\n\n            <div className=\"mc-input-group\">\n              <label htmlFor=\"hoaFees\">Monthly HOA Fees</label>\n              <div className=\"mc-input-wrapper\">\n                <span className=\"mc-currency-symbol\">$</span>\n                <input\n                  id=\"hoaFees\"\n                  type=\"number\"\n                  value={hoaFees}\n                  onChange={(e) => setHoaFees(e.target.value)}\n                  min=\"0\"\n                  step=\"10\"\n                />\n              </div>\n            </div>\n          </div>\n        </div>\n\n        {/* Right Panel - Results */}\n        <div className=\"mc-results-panel\">\n          {result && (\n            <>\n              <div className=\"mc-summary-cards\">\n                <div className=\"mc-summary-card mc-primary\">\n                  <div className=\"mc-card-header\">\n                    <h3>Monthly Payment</h3>\n                  </div>\n                  <div className=\"mc-card-value\">\n                    {formatCurrency(result.totalMonthlyPayment)}\n                  </div>\n                  <div className=\"mc-card-subtitle\">\n                    P&I: {formatCurrency(result.monthlyPayment)}\n                  </div>\n                </div>\n\n                <div className=\"mc-summary-card\">\n                  <div className=\"mc-card-header\">\n                    <h3>Home Price</h3>\n                  </div>\n                  <div className=\"mc-card-value\">\n                    {formatCurrency(result.homePrice)}\n                  </div>\n                  <div className=\"mc-card-subtitle\">\n                    LTV: {formatPercent(result.loanToValue)}\n                  </div>\n                </div>\n\n                <div className=\"mc-summary-card\">\n                  <div className=\"mc-card-header\">\n                    <h3>Total Interest</h3>\n                  </div>\n                  <div className=\"mc-card-value mc-interest\">\n                    {formatCurrency(result.totalInterest)}\n                  </div>\n                  <div className=\"mc-card-subtitle\">\n                    Over {loanTerm} years\n                  </div>\n                </div>\n\n                <div className=\"mc-summary-card\">\n                  <div className=\"mc-card-header\">\n                    <h3>Payoff Date</h3>\n                  </div>\n                  <div className=\"mc-card-value mc-date\">\n                    {formatDate(result.payoffDate)}\n                  </div>\n                  <div className=\"mc-card-subtitle\">\n                    {loanTerm * 12} payments\n                  </div>\n                </div>\n              </div>\n\n              <div className=\"mc-charts-section\">\n                <div className=\"mc-chart-container\">\n                  <h3>Principal vs Interest Over Time</h3>\n                  <ResponsiveContainer width=\"100%\" height={300}>\n                    <LineChart data={yearlyData}>\n                      <CartesianGrid strokeDasharray=\"3 3\" stroke=\"rgba(255,255,255,0.1)\" />\n                      <XAxis \n                        dataKey=\"year\" \n                        stroke=\"#b0b0b0\"\n                        fontSize={12}\n                      />\n                      <YAxis \n                        tickFormatter={formatCurrency}\n                        stroke=\"#b0b0b0\"\n                        fontSize={12}\n                      />\n                      <Tooltip \n                        formatter={(value, name) => [formatCurrency(value), name]}\n                        labelFormatter={(label) => `Year ${label}`}\n                        contentStyle={{\n                          backgroundColor: 'rgba(10, 25, 47, 0.95)',\n                          border: '1px solid rgba(0, 191, 255, 0.3)',\n                          borderRadius: '8px',\n                          color: '#e0e0e0'\n                        }}\n                      />\n                      <Legend />\n                      <Line \n                        type=\"monotone\" \n                        dataKey=\"totalPrincipalPaid\" \n                        stroke=\"#00bfff\" \n                        strokeWidth={2}\n                        name=\"Total Principal Paid\"\n                        dot={{ fill: '#00bfff', strokeWidth: 2, r: 4 }}\n                      />\n                      <Line \n                        type=\"monotone\" \n                        dataKey=\"totalInterestPaid\" \n                        stroke=\"#ff6b6b\" \n                        strokeWidth={2}\n                        name=\"Total Interest Paid\"\n                        dot={{ fill: '#ff6b6b', strokeWidth: 2, r: 4 }}\n                      />\n                    </LineChart>\n                  </ResponsiveContainer>\n                </div>\n\n                <div className=\"mc-pie-container\">\n                  <h3>Total Cost Breakdown</h3>\n                  <ResponsiveContainer width=\"100%\" height={250}>\n                    <PieChart>\n                      <Pie\n                        data={pieData}\n                        cx=\"50%\"\n                        cy=\"50%\"\n                        innerRadius={40}\n                        outerRadius={80}\n                        paddingAngle={5}\n                        dataKey=\"value\"\n                      >\n                        {pieData.map((entry, index) => (\n                          <Cell key={`cell-${index}`} fill={entry.color} />\n                        ))}\n                      </Pie>\n                      <Tooltip \n                        formatter={(value) => formatCurrency(value)}\n                        contentStyle={{\n                          backgroundColor: 'rgba(10, 25, 47, 0.95)',\n                          border: '1px solid rgba(0, 191, 255, 0.3)',\n                          borderRadius: '8px',\n                          color: '#e0e0e0'\n                        }}\n                      />\n                      <Legend />\n                    </PieChart>\n                  </ResponsiveContainer>\n                </div>\n              </div>\n\n              <div className=\"mc-monthly-breakdown\">\n                <h3>Monthly Payment Breakdown</h3>\n                <ResponsiveContainer width=\"100%\" height={300}>\n                  <PieChart>\n                    <Pie\n                      data={monthlyPieData}\n                      cx=\"50%\"\n                      cy=\"50%\"\n                      innerRadius={60}\n                      outerRadius={100}\n                      paddingAngle={5}\n                      dataKey=\"value\"\n                      label={({ name, percent }) => `${name} ${(percent * 100).toFixed(0)}%`}\n                    >\n                      {monthlyPieData.map((entry, index) => (\n                        <Cell key={`cell-${index}`} fill={MONTHLY_COLORS[index % MONTHLY_COLORS.length]} />\n                      ))}\n                    </Pie>\n                    <Tooltip\n                      formatter={(value) => formatCurrency(value)}\n                      contentStyle={{\n                        backgroundColor: 'rgba(10, 25, 47, 0.95)',\n                        border: '1px solid rgba(0, 191, 255, 0.3)',\n                        borderRadius: '8px',\n                        color: '#e0e0e0'\n                      }}\n                    />\n                    <Legend />\n                  </PieChart>\n                </ResponsiveContainer>\n              </div>\n            </>\n          )}\n        </div>\n      </div>\n\n      {/* Amortization Table */}\n      {result && amortizationData.length > 0 && (\n        <div className=\"mc-table-section\">\n          <h2>Amortization Schedule</h2>\n          <div className=\"mc-table-container\">\n            <table className=\"mc-table\">\n              <thead>\n                <tr>\n                  <th>Payment #</th>\n                  <th>Year</th>\n                  <th>Payment</th>\n                  <th>Principal</th>\n                  <th>Interest</th>\n                  <th>Balance</th>\n                  <th>Total Interest</th>\n                </tr>\n              </thead>\n              <tbody>\n                {amortizationData.slice(0, 60).map((payment, index) => (\n                  <tr key={payment.month} className={payment.month % 12 === 0 ? 'mc-year-end' : ''}>\n                    <td>{payment.month}</td>\n                    <td>{payment.year}</td>\n                    <td className=\"mc-payment\">{formatCurrency(payment.monthlyPayment)}</td>\n                    <td className=\"mc-principal\">{formatCurrency(payment.principalPayment)}</td>\n                    <td className=\"mc-interest\">{formatCurrency(payment.interestPayment)}</td>\n                    <td className=\"mc-balance\">{formatCurrency(payment.remainingBalance)}</td>\n                    <td className=\"mc-total-interest\">{formatCurrency(payment.totalInterestPaid)}</td>\n                  </tr>\n                ))}\n                {amortizationData.length > 60 && (\n                  <tr className=\"mc-more-rows\">\n                    <td colSpan=\"7\">\n                      ... and {amortizationData.length - 60} more payments\n                    </td>\n                  </tr>\n                )}\n              </tbody>\n            </table>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default MortgageCalculator; "],"names":["MortgageCalculator","loanAmount","setLoanAmount","useState","interestRate","setInterestRate","loanTerm","setLoanTerm","downPayment","setDownPayment","propertyTaxRate","setPropertyTaxRate","insuranceRate","setInsuranceRate","pmiRate","setPmiRate","hoaFees","setHoaFees","result","setResult","amortizationData","setAmortizationData","yearlyData","setYearlyData","calculateMortgage","useCallback","principal","parseFloat","monthlyRate","totalPayments","downPaymentAmount","homePrice","monthlyPropertyTax","monthlyInsurance","loanToValue","monthlyPmi","monthlyHoa","monthlyPayment","Math","pow","totalMonthlyPayment","amortization","yearlyBreakdown","remainingBalance","totalInterestPaid","totalPrincipalPaid","yearlyInterest","yearlyPrincipal","month","interestPayment","principalPayment","push","year","ceil","totalPaymentAmount","totalInterest","payoffDate","Date","now","useEffect","pieData","name","value","color","monthlyPieData","filter","item","MONTHLY_COLORS","formatCurrency","Intl","NumberFormat","style","currency","minimumFractionDigits","maximumFractionDigits","format","_jsxs","className","children","_jsx","htmlFor","id","type","onChange","e","target","min","step","max","_Fragment","concat","toFixed","date","toLocaleDateString","ResponsiveContainer","width","height","LineChart","data","CartesianGrid","strokeDasharray","stroke","XAxis","dataKey","fontSize","YAxis","tickFormatter","Tooltip","formatter","labelFormatter","label","contentStyle","backgroundColor","border","borderRadius","Legend","Line","strokeWidth","dot","fill","r","PieChart","Pie","cx","cy","innerRadius","outerRadius","paddingAngle","map","entry","index","Cell","_ref","percent","length","slice","payment","colSpan"],"sourceRoot":""}