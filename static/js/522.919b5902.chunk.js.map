{"version":3,"file":"static/js/522.919b5902.chunk.js","mappings":"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","sources":["components/RetirementPlanner.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { \r\n  XAxis, \r\n  YAxis, \r\n  CartesianGrid, \r\n  Tooltip, \r\n  Legend, \r\n  ResponsiveContainer,\r\n  PieChart,\r\n  Pie,\r\n  Cell,\r\n  Area,\r\n  AreaChart\r\n} from 'recharts';\r\nimport './RetirementPlanner.css';\r\n\r\n// Social Security calculation constants\r\nconst SOCIAL_SECURITY_BENEFITS = {\r\n  // Full retirement age (FRA) based on birth year\r\n  fullRetirementAge: 67, // For people born 1960 or later\r\n  // Benefit reduction for early claiming (before FRA)\r\n  earlyReduction: 0.0055, // 5.5% reduction per year before FRA\r\n  // Benefit increase for delayed claiming (after FRA)\r\n  delayedIncrease: 0.08, // 8% increase per year after FRA\r\n  // Maximum benefit at FRA (2024)\r\n  maxBenefitAtFRA: 3744, // Monthly maximum\r\n  // Average benefit (2024)\r\n  averageBenefit: 1854, // Monthly average\r\n};\r\n\r\nconst defaultInputs = {\r\n  currentAge: 30,\r\n  retirementAge: 65,\r\n  currentSavings: 50000,\r\n  monthlyContribution: 1000,\r\n  expectedReturn: 7,\r\n  desiredRetirementIncome: 80000,\r\n  inflationRate: 2.5,\r\n  currentSalary: 75000,\r\n  salaryGrowthRate: 3,\r\n  retirementDuration: 25,\r\n  // Social Security will be auto-calculated\r\n  socialSecurityAge: 67,\r\n  expectedSocialSecurity: 0, // Will be calculated\r\n};\r\n\r\nconst RetirementPlanner = () => {\r\n  const [inputs, setInputs] = useState(() => {\r\n    const saved = JSON.parse(localStorage.getItem('retirement_inputs') || 'null');\r\n    const initialInputs = saved || defaultInputs;\r\n    \r\n    // Auto-calculate social security if not set\r\n    if (!saved || saved.expectedSocialSecurity === 0) {\r\n      initialInputs.expectedSocialSecurity = calculateSocialSecurity(initialInputs.currentSalary, initialInputs.socialSecurityAge);\r\n    }\r\n    \r\n    return initialInputs;\r\n  });\r\n  const [activeTab, setActiveTab] = useState('inputs');\r\n  const [projections, setProjections] = useState({\r\n    yearlyData: [],\r\n    retirementIncome: [],\r\n    nestEgg: 0,\r\n    withdrawalIncome: 0,\r\n    incomeShortfall: 0,\r\n    totalContributions: 0,\r\n    totalGrowth: 0,\r\n    socialSecurityTotal: 0,\r\n    recommendedSavings: 0,\r\n    socialSecurityDetails: {}\r\n  });\r\n\r\n  // Calculate Social Security benefit based on income and claiming age\r\n  function calculateSocialSecurity(annualIncome, claimingAge) {\r\n    const fra = SOCIAL_SECURITY_BENEFITS.fullRetirementAge;\r\n    let monthlyBenefit;\r\n    \r\n    // Calculate base benefit at full retirement age\r\n    if (annualIncome <= 50000) {\r\n      // Lower income: 40% replacement rate\r\n      monthlyBenefit = (annualIncome * 0.40) / 12;\r\n    } else if (annualIncome <= 100000) {\r\n      // Medium income: 30% replacement rate\r\n      monthlyBenefit = (annualIncome * 0.30) / 12;\r\n    } else if (annualIncome <= 150000) {\r\n      // Higher income: 25% replacement rate\r\n      monthlyBenefit = (annualIncome * 0.25) / 12;\r\n    } else {\r\n      // High income: 20% replacement rate (capped by maximum)\r\n      monthlyBenefit = Math.min((annualIncome * 0.20) / 12, SOCIAL_SECURITY_BENEFITS.maxBenefitAtFRA);\r\n    }\r\n    \r\n    // Adjust for claiming age\r\n    if (claimingAge < fra) {\r\n      // Early claiming: reduce benefit\r\n      const yearsEarly = fra - claimingAge;\r\n      const reduction = yearsEarly * SOCIAL_SECURITY_BENEFITS.earlyReduction;\r\n      monthlyBenefit *= (1 - reduction);\r\n    } else if (claimingAge > fra) {\r\n      // Delayed claiming: increase benefit\r\n      const yearsDelayed = claimingAge - fra;\r\n      const increase = yearsDelayed * SOCIAL_SECURITY_BENEFITS.delayedIncrease;\r\n      monthlyBenefit *= (1 + increase);\r\n    }\r\n    \r\n    return Math.round(monthlyBenefit);\r\n  }\r\n\r\n  // Find optimal Social Security claiming age\r\n  function findOptimalClaimingAge(annualIncome) {\r\n    let maxBenefit = 0;\r\n    let optimalAge = SOCIAL_SECURITY_BENEFITS.fullRetirementAge;\r\n    \r\n    for (let age = 62; age <= 70; age++) {\r\n      const benefit = calculateSocialSecurity(annualIncome, age);\r\n      if (benefit > maxBenefit) {\r\n        maxBenefit = benefit;\r\n        optimalAge = age;\r\n      }\r\n    }\r\n    \r\n    return optimalAge;\r\n  }\r\n\r\n  useEffect(() => {\r\n    localStorage.setItem('retirement_inputs', JSON.stringify(inputs));\r\n    calculateProjections();\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [inputs]);\r\n\r\n  const handleChange = (field, value) => {\r\n    const newInputs = { ...inputs, [field]: value };\r\n    \r\n    // Auto-update social security when salary changes\r\n    if (field === 'currentSalary') {\r\n      const optimalAge = findOptimalClaimingAge(value);\r\n      newInputs.socialSecurityAge = optimalAge;\r\n      newInputs.expectedSocialSecurity = calculateSocialSecurity(value, optimalAge);\r\n    }\r\n    \r\n    // Auto-update social security when claiming age changes\r\n    if (field === 'socialSecurityAge') {\r\n      newInputs.expectedSocialSecurity = calculateSocialSecurity(newInputs.currentSalary, value);\r\n    }\r\n    \r\n    setInputs(newInputs);\r\n  };\r\n\r\n  const calculateProjections = () => {\r\n    const {\r\n      currentAge,\r\n      retirementAge,\r\n      currentSavings,\r\n      monthlyContribution,\r\n      expectedReturn,\r\n      desiredRetirementIncome,\r\n      inflationRate,\r\n      expectedSocialSecurity,\r\n      currentSalary,\r\n      salaryGrowthRate,\r\n    } = inputs;\r\n\r\n    const yearsToRetirement = Math.max(retirementAge - currentAge, 0);\r\n    const monthsToRetirement = yearsToRetirement * 12;\r\n    const r = (expectedReturn / 100) / 12;\r\n\r\n    // Calculate yearly projections\r\n    const yearlyData = [];\r\n    let balance = currentSavings;\r\n    let totalContributions = currentSavings;\r\n    let salary = currentSalary;\r\n\r\n    for (let year = 0; year <= yearsToRetirement; year++) {\r\n      const age = currentAge + year;\r\n      const yearlyContribution = monthlyContribution * 12;\r\n      \r\n      if (year > 0) {\r\n        // Add yearly contribution\r\n        balance += yearlyContribution;\r\n        totalContributions += yearlyContribution;\r\n        \r\n        // Apply growth\r\n        balance *= (1 + expectedReturn / 100);\r\n        \r\n        // Update salary\r\n        salary *= (1 + salaryGrowthRate / 100);\r\n      }\r\n\r\n      yearlyData.push({\r\n        age,\r\n        year: new Date().getFullYear() + year,\r\n        balance: Math.round(balance),\r\n        contributions: Math.round(totalContributions),\r\n        growth: Math.round(balance - totalContributions),\r\n        salary: Math.round(salary),\r\n        isRetirement: age >= retirementAge\r\n      });\r\n    }\r\n\r\n    const nestEgg = balance;\r\n    const totalGrowth = nestEgg - totalContributions;\r\n\r\n    // Calculate retirement income sources\r\n    const withdrawalIncome = nestEgg * 0.04; // 4% rule\r\n    const socialSecurityIncome = expectedSocialSecurity * 12;\r\n    const totalRetirementIncome = withdrawalIncome + socialSecurityIncome;\r\n\r\n    // Adjust desired income for inflation\r\n    const inflationAdj = Math.pow(1 + inflationRate / 100, yearsToRetirement);\r\n    const desiredIncomeInflated = desiredRetirementIncome * inflationAdj;\r\n\r\n    const incomeShortfall = desiredIncomeInflated - totalRetirementIncome;\r\n\r\n    // Calculate recommended savings if there's a shortfall\r\n    let recommendedSavings = monthlyContribution;\r\n    if (incomeShortfall > 0) {\r\n      const additionalNeeded = incomeShortfall / 0.04;\r\n      const additionalMonthly = (additionalNeeded / ((Math.pow(1 + r, monthsToRetirement) - 1) / r));\r\n      recommendedSavings = monthlyContribution + additionalMonthly;\r\n    }\r\n\r\n    // Create retirement income breakdown\r\n    const retirementIncome = [\r\n      { source: 'Investment Withdrawals', amount: withdrawalIncome, percentage: (withdrawalIncome / totalRetirementIncome) * 100 },\r\n      { source: 'Social Security', amount: socialSecurityIncome, percentage: (socialSecurityIncome / totalRetirementIncome) * 100 }\r\n    ];\r\n\r\n    // Social Security details for display\r\n    const socialSecurityDetails = {\r\n      fullRetirementAge: SOCIAL_SECURITY_BENEFITS.fullRetirementAge,\r\n      optimalAge: findOptimalClaimingAge(currentSalary),\r\n      benefitAtFRA: calculateSocialSecurity(currentSalary, SOCIAL_SECURITY_BENEFITS.fullRetirementAge),\r\n      benefitAtOptimal: calculateSocialSecurity(currentSalary, findOptimalClaimingAge(currentSalary)),\r\n      benefitAtCurrent: expectedSocialSecurity\r\n    };\r\n\r\n    setProjections({\r\n      yearlyData,\r\n      retirementIncome,\r\n      nestEgg,\r\n      withdrawalIncome,\r\n      incomeShortfall,\r\n      totalContributions,\r\n      totalGrowth,\r\n      socialSecurityTotal: socialSecurityIncome,\r\n      recommendedSavings,\r\n      socialSecurityDetails\r\n    });\r\n  };\r\n\r\n  const formatCurrency = (amount) => {\r\n    return new Intl.NumberFormat('en-US', {\r\n      style: 'currency',\r\n      currency: 'USD',\r\n      minimumFractionDigits: 0,\r\n      maximumFractionDigits: 0,\r\n    }).format(amount);\r\n  };\r\n\r\n  const COLORS = ['#00bfff', '#32cd32', '#ffdf00', '#ff4d4d'];\r\n\r\n  return (\r\n    <div className=\"retirement-planner\">\r\n      <div className=\"rp-header\">\r\n        <h1>Retirement Planner</h1>\r\n        <p>Plan your retirement with detailed projections and Social Security optimization</p>\r\n      </div>\r\n\r\n      <div className=\"rp-main-content\">\r\n        <div className=\"rp-tabs\">\r\n          <button \r\n            className={activeTab === 'inputs' ? 'active' : ''} \r\n            onClick={() => setActiveTab('inputs')}\r\n          >\r\n            Input Parameters\r\n          </button>\r\n          <button \r\n            className={activeTab === 'projections' ? 'active' : ''} \r\n            onClick={() => setActiveTab('projections')}\r\n          >\r\n            Growth Projections\r\n          </button>\r\n          <button \r\n            className={activeTab === 'income' ? 'active' : ''} \r\n            onClick={() => setActiveTab('income')}\r\n          >\r\n            Retirement Income\r\n          </button>\r\n          <button \r\n            className={activeTab === 'analysis' ? 'active' : ''} \r\n            onClick={() => setActiveTab('analysis')}\r\n          >\r\n            Analysis & Recommendations\r\n          </button>\r\n        </div>\r\n\r\n        {activeTab === 'inputs' && (\r\n          <div className=\"rp-inputs-section\">\r\n            <div className=\"rp-input-grid\">\r\n              <div className=\"rp-input-group\">\r\n                <h3>Personal Information</h3>\r\n                <div className=\"rp-input\">\r\n                  <label>Current Age</label>\r\n                  <input type=\"number\" value={inputs.currentAge} onChange={e => handleChange('currentAge', Number(e.target.value))} />\r\n                </div>\r\n                <div className=\"rp-input\">\r\n                  <label>Retirement Age</label>\r\n                  <input type=\"number\" value={inputs.retirementAge} onChange={e => handleChange('retirementAge', Number(e.target.value))} />\r\n                </div>\r\n                <div className=\"rp-input\">\r\n                  <label>Current Annual Salary ($)</label>\r\n                  <input type=\"number\" value={inputs.currentSalary} onChange={e => handleChange('currentSalary', Number(e.target.value))} />\r\n                </div>\r\n                <div className=\"rp-input\">\r\n                  <label>Salary Growth Rate (%)</label>\r\n                  <input type=\"number\" step=\"0.1\" value={inputs.salaryGrowthRate} onChange={e => handleChange('salaryGrowthRate', Number(e.target.value))} />\r\n                </div>\r\n              </div>\r\n\r\n              <div className=\"rp-input-group\">\r\n                <h3>Savings & Investments</h3>\r\n                <div className=\"rp-input\">\r\n                  <label>Current Savings ($)</label>\r\n                  <input type=\"number\" value={inputs.currentSavings} onChange={e => handleChange('currentSavings', Number(e.target.value))} />\r\n                </div>\r\n                <div className=\"rp-input\">\r\n                  <label>Monthly Contribution ($)</label>\r\n                  <input type=\"number\" value={inputs.monthlyContribution} onChange={e => handleChange('monthlyContribution', Number(e.target.value))} />\r\n                </div>\r\n                <div className=\"rp-input\">\r\n                  <label>Expected Return (%)</label>\r\n                  <input type=\"number\" step=\"0.1\" value={inputs.expectedReturn} onChange={e => handleChange('expectedReturn', Number(e.target.value))} />\r\n                </div>\r\n                <div className=\"rp-input\">\r\n                  <label>Inflation Rate (%)</label>\r\n                  <input type=\"number\" step=\"0.1\" value={inputs.inflationRate} onChange={e => handleChange('inflationRate', Number(e.target.value))} />\r\n                </div>\r\n              </div>\r\n\r\n              <div className=\"rp-input-group\">\r\n                <h3>Retirement Planning</h3>\r\n                <div className=\"rp-input\">\r\n                  <label>Desired Annual Income ($)</label>\r\n                  <input type=\"number\" value={inputs.desiredRetirementIncome} onChange={e => handleChange('desiredRetirementIncome', Number(e.target.value))} />\r\n                </div>\r\n                <div className=\"rp-input\">\r\n                  <label>Social Security Claiming Age</label>\r\n                  <input type=\"number\" value={inputs.socialSecurityAge} onChange={e => handleChange('socialSecurityAge', Number(e.target.value))} min=\"62\" max=\"70\" />\r\n                </div>\r\n                <div className=\"rp-input\">\r\n                  <label>Expected Social Security ($/month)</label>\r\n                  <input type=\"number\" value={inputs.expectedSocialSecurity} onChange={e => handleChange('expectedSocialSecurity', Number(e.target.value))} />\r\n                </div>\r\n                <div className=\"rp-input\">\r\n                  <label>Retirement Duration (years)</label>\r\n                  <input type=\"number\" value={inputs.retirementDuration} onChange={e => handleChange('retirementDuration', Number(e.target.value))} />\r\n                </div>\r\n              </div>\r\n            </div>\r\n\r\n            <div className=\"rp-social-security-info\">\r\n              <h3>Social Security Information</h3>\r\n              <div className=\"rp-ss-details\">\r\n                <div className=\"rp-ss-item\">\r\n                  <span>Full Retirement Age:</span>\r\n                  <span>{SOCIAL_SECURITY_BENEFITS.fullRetirementAge}</span>\r\n                </div>\r\n                <div className=\"rp-ss-item\">\r\n                  <span>Optimal Claiming Age:</span>\r\n                  <span>{projections.socialSecurityDetails?.optimalAge || 67}</span>\r\n                </div>\r\n                <div className=\"rp-ss-item\">\r\n                  <span>Benefit at Full Retirement Age:</span>\r\n                  <span>{formatCurrency(projections.socialSecurityDetails?.benefitAtFRA || 0)}/month</span>\r\n                </div>\r\n                <div className=\"rp-ss-item\">\r\n                  <span>Benefit at Optimal Age:</span>\r\n                  <span>{formatCurrency(projections.socialSecurityDetails?.benefitAtOptimal || 0)}/month</span>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        )}\r\n\r\n        {activeTab === 'projections' && (\r\n          <div className=\"rp-projections-section\">\r\n            <div className=\"rp-chart-container\">\r\n              <h3>Retirement Savings Growth</h3>\r\n              <ResponsiveContainer width=\"100%\" height={400}>\r\n                <AreaChart data={projections.yearlyData}>\r\n                  <CartesianGrid strokeDasharray=\"3 3\" stroke=\"rgba(255,255,255,0.1)\" />\r\n                  <XAxis dataKey=\"age\" tick={{ fill: '#ccc' }} />\r\n                  <YAxis tick={{ fill: '#ccc' }} tickFormatter={(value) => formatCurrency(value)} />\r\n                  <Tooltip formatter={(value) => formatCurrency(value)} />\r\n                  <Legend />\r\n                  <Area type=\"monotone\" dataKey=\"contributions\" stackId=\"1\" stroke=\"#32cd32\" fill=\"#32cd32\" fillOpacity={0.6} name=\"Contributions\" />\r\n                  <Area type=\"monotone\" dataKey=\"growth\" stackId=\"1\" stroke=\"#00bfff\" fill=\"#00bfff\" fillOpacity={0.6} name=\"Growth\" />\r\n                </AreaChart>\r\n              </ResponsiveContainer>\r\n            </div>\r\n\r\n            <div className=\"rp-summary-cards\">\r\n              <div className=\"rp-summary-card\">\r\n                <h4>Total Nest Egg</h4>\r\n                <p className=\"rp-amount\">{formatCurrency(projections.nestEgg)}</p>\r\n              </div>\r\n              <div className=\"rp-summary-card\">\r\n                <h4>Total Contributions</h4>\r\n                <p className=\"rp-amount\">{formatCurrency(projections.totalContributions)}</p>\r\n              </div>\r\n              <div className=\"rp-summary-card\">\r\n                <h4>Investment Growth</h4>\r\n                <p className=\"rp-amount\">{formatCurrency(projections.totalGrowth)}</p>\r\n              </div>\r\n              <div className=\"rp-summary-card\">\r\n                <h4>Years to Retirement</h4>\r\n                <p className=\"rp-amount\">{inputs.retirementAge - inputs.currentAge}</p>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        )}\r\n\r\n        {activeTab === 'income' && (\r\n          <div className=\"rp-income-section\">\r\n            <div className=\"rp-income-grid\">\r\n              <div className=\"rp-chart-container\">\r\n                <h3>Retirement Income Sources</h3>\r\n                <ResponsiveContainer width=\"100%\" height={300}>\r\n                  <PieChart>\r\n                    <Pie\r\n                      data={projections.retirementIncome}\r\n                      dataKey=\"amount\"\r\n                      nameKey=\"source\"\r\n                      cx=\"50%\"\r\n                      cy=\"50%\"\r\n                      outerRadius={100}\r\n                      label={({ source, percentage }) => `${source}: ${percentage.toFixed(1)}%`}\r\n                    >\r\n                      {projections.retirementIncome.map((entry, index) => (\r\n                        <Cell key={`cell-${index}`} fill={COLORS[index % COLORS.length]} />\r\n                      ))}\r\n                    </Pie>\r\n                    <Tooltip formatter={(value) => formatCurrency(value)} />\r\n                  </PieChart>\r\n                </ResponsiveContainer>\r\n              </div>\r\n\r\n              <div className=\"rp-income-breakdown\">\r\n                <h3>Monthly Income Breakdown</h3>\r\n                <div className=\"rp-income-list\">\r\n                  {projections.retirementIncome.map((income, index) => (\r\n                    <div key={index} className=\"rp-income-item\">\r\n                      <span className=\"rp-income-source\">{income.source}</span>\r\n                      <span className=\"rp-income-amount\">{formatCurrency(income.amount / 12)}/month</span>\r\n                    </div>\r\n                  ))}\r\n                  <div className=\"rp-income-item rp-income-total\">\r\n                    <span className=\"rp-income-source\">Total Monthly Income</span>\r\n                    <span className=\"rp-income-amount\">\r\n                      {formatCurrency((projections.withdrawalIncome + projections.socialSecurityTotal) / 12)}/month\r\n                    </span>\r\n                  </div>\r\n                  <div className=\"rp-income-item rp-income-needed\">\r\n                    <span className=\"rp-income-source\">Needed Monthly Income</span>\r\n                    <span className=\"rp-income-amount\">\r\n                      {formatCurrency(inputs.desiredRetirementIncome / 12)}/month\r\n                    </span>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        )}\r\n\r\n        {activeTab === 'analysis' && (\r\n          <div className=\"rp-analysis-section\">\r\n            <div className=\"rp-analysis-grid\">\r\n              <div className=\"rp-analysis-card\">\r\n                <h3>Retirement Readiness</h3>\r\n                <div className=\"rp-readiness-indicator\">\r\n                  <div className={`rp-status ${projections.incomeShortfall <= 0 ? 'positive' : 'negative'}`}>\r\n                    {projections.incomeShortfall <= 0 ? '✓ On Track' : '⚠ Needs Improvement'}\r\n                  </div>\r\n                  <p className=\"rp-gap\">\r\n                    Income Shortfall: <span className={projections.incomeShortfall <= 0 ? 'positive' : 'negative'}>\r\n                      {projections.incomeShortfall <= 0 ? 'Surplus: +' : 'Shortfall: '}{formatCurrency(Math.abs(projections.incomeShortfall))}\r\n                    </span>\r\n                  </p>\r\n                  <p className=\"rp-explanation\">\r\n                    {projections.incomeShortfall <= 0 \r\n                      ? 'Your projected retirement income meets or exceeds your desired income.'\r\n                      : 'Your projected retirement income is below your desired income level.'\r\n                    }\r\n                  </p>\r\n                </div>\r\n              </div>\r\n\r\n              <div className=\"rp-analysis-card\">\r\n                <h3>Recommendations</h3>\r\n                <div className=\"rp-recommendations\">\r\n                  {projections.incomeShortfall > 0 ? (\r\n                    <>\r\n                      <p>To meet your retirement goals, consider:</p>\r\n                      <ul>\r\n                        <li>Increase monthly savings to {formatCurrency(projections.recommendedSavings)}</li>\r\n                        <li>Work {Math.ceil(projections.incomeShortfall / 20000)} additional years</li>\r\n                        <li>Reduce retirement expenses by {formatCurrency(projections.incomeShortfall)}</li>\r\n                        <li>Delay Social Security to age {projections.socialSecurityDetails?.optimalAge || 67}</li>\r\n                      </ul>\r\n                    </>\r\n                  ) : (\r\n                    <>\r\n                      <p>Congratulations! You're on track for retirement.</p>\r\n                      <ul>\r\n                        <li>Continue your current savings plan</li>\r\n                        <li>Consider increasing contributions if income grows</li>\r\n                        <li>Review and rebalance investments annually</li>\r\n                        <li>Consider retiring earlier or increasing lifestyle</li>\r\n                      </ul>\r\n                    </>\r\n                  )}\r\n                </div>\r\n              </div>\r\n\r\n              <div className=\"rp-analysis-card\">\r\n                <h3>Key Metrics</h3>\r\n                <div className=\"rp-metrics\">\r\n                  <div className=\"rp-metric\">\r\n                    <span className=\"rp-metric-label\">Income Replacement Ratio</span>\r\n                    <span className=\"rp-metric-value\">\r\n                      {((projections.withdrawalIncome + projections.socialSecurityTotal) / inputs.currentSalary * 100).toFixed(1)}%\r\n                    </span>\r\n                  </div>\r\n                  <div className=\"rp-metric\">\r\n                    <span className=\"rp-metric-label\">Savings Rate</span>\r\n                    <span className=\"rp-metric-value\">\r\n                      {((inputs.monthlyContribution * 12) / inputs.currentSalary * 100).toFixed(1)}%\r\n                    </span>\r\n                  </div>\r\n                  <div className=\"rp-metric\">\r\n                    <span className=\"rp-metric-label\">Years to Retirement</span>\r\n                    <span className=\"rp-metric-value\">\r\n                      {inputs.retirementAge - inputs.currentAge} years\r\n                    </span>\r\n                  </div>\r\n                  <div className=\"rp-metric\">\r\n                    <span className=\"rp-metric-label\">Social Security Coverage</span>\r\n                    <span className=\"rp-metric-value\">\r\n                      {((projections.socialSecurityTotal / 12) / ((projections.withdrawalIncome + projections.socialSecurityTotal) / 12) * 100).toFixed(1)}%\r\n                    </span>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default RetirementPlanner; "],"names":["SOCIAL_SECURITY_BENEFITS","defaultInputs","currentAge","retirementAge","currentSavings","monthlyContribution","expectedReturn","desiredRetirementIncome","inflationRate","currentSalary","salaryGrowthRate","retirementDuration","socialSecurityAge","expectedSocialSecurity","RetirementPlanner","_projections$socialSe","_projections$socialSe2","_projections$socialSe3","_projections$socialSe4","inputs","setInputs","useState","saved","JSON","parse","localStorage","getItem","initialInputs","calculateSocialSecurity","activeTab","setActiveTab","projections","setProjections","yearlyData","retirementIncome","nestEgg","withdrawalIncome","incomeShortfall","totalContributions","totalGrowth","socialSecurityTotal","recommendedSavings","socialSecurityDetails","annualIncome","claimingAge","fra","monthlyBenefit","Math","min","round","findOptimalClaimingAge","maxBenefit","optimalAge","age","benefit","useEffect","setItem","stringify","calculateProjections","handleChange","field","value","newInputs","_objectSpread","yearsToRetirement","max","monthsToRetirement","r","balance","salary","year","yearlyContribution","push","Date","getFullYear","contributions","growth","isRetirement","socialSecurityIncome","totalRetirementIncome","pow","source","amount","percentage","fullRetirementAge","benefitAtFRA","benefitAtOptimal","benefitAtCurrent","formatCurrency","Intl","NumberFormat","style","currency","minimumFractionDigits","maximumFractionDigits","format","COLORS","_jsxs","className","children","_jsx","onClick","type","onChange","e","Number","target","step","ResponsiveContainer","width","height","AreaChart","data","CartesianGrid","strokeDasharray","stroke","XAxis","dataKey","tick","fill","YAxis","tickFormatter","Tooltip","formatter","Legend","Area","stackId","fillOpacity","name","PieChart","Pie","nameKey","cx","cy","outerRadius","label","_ref","concat","toFixed","map","entry","index","Cell","length","income","abs","_Fragment","ceil"],"sourceRoot":""}