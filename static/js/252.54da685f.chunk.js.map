{"version":3,"file":"static/js/252.54da685f.chunk.js","mappings":"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","sources":["components/StockAnalyzer.js"],"sourcesContent":["import React, { useState, useEffect, useCallback } from 'react';\nimport axios from 'axios';\nimport { Bar } from 'react-chartjs-2';\nimport {\n  Chart as ChartJS,\n  CategoryScale,\n  LinearScale,\n  BarElement,\n  Title,\n  Tooltip,\n  Legend,\n} from 'chart.js';\nimport './StockAnalyzer.css';\n\nChartJS.register(\n  CategoryScale,\n  LinearScale,\n  BarElement,\n  Title,\n  Tooltip,\n  Legend\n);\n\nconst StockAnalyzer = () => {\n  // API & Ticker\n  const apiKey = '45dce6a8aa49cafd332393286f49e99f'; // Hardcoded API Key\n  const [ticker, setTicker] = useState('AAPL');\n\n  // Inputs\n  const [years, setYears] = useState(5);\n  const [initialRevenue, setInitialRevenue] = useState(0);\n  const [revenueGrowth, setRevenueGrowth] = useState(10);\n  const [initialMargin, setInitialMargin] = useState(0);\n  const [marginGrowth, setMarginGrowth] = useState(1);\n  const [sharesOutstanding, setSharesOutstanding] = useState(0);\n  const [sharesChange, setSharesChange] = useState(-1);\n  const [dividendYield, setDividendYield] = useState(0);\n  const [peRatio, setPeRatio] = useState(25);\n  const [currentStockPrice, setCurrentStockPrice] = useState(0);\n\n  // Data & Results\n  const [data, setData] = useState([]);\n  const [expectedReturn, setExpectedReturn] = useState({ totalReturn: 0, annualizedReturn: 0 });\n  const [error, setError] = useState('');\n  const [activeChartTab, setActiveChartTab] = useState('revenue');\n\n  const [revenueCAGR, setRevenueCAGR] = useState({ '1Y': 0, '2Y': 0, '5Y': 0 });\n  const [earningsCAGR, setEarningsCAGR] = useState({ '1Y': 0, '2Y': 0, '5Y': 0 });\n  const [fairValueCAGR, setFairValueCAGR] = useState({ '1Y': 0, '2Y': 0, '5Y': 0 });\n\n  const calculateCAGR = (values, numYears) => {\n    if (values.length < numYears + 1 || values[0] === 0) return 0;\n    return (Math.pow(values[numYears] / values[0], 1 / numYears) - 1) * 100;\n  };\n\n  const fetchFinancialData = useCallback(async () => {\n    if (!ticker || !apiKey) {\n      setError('Please enter a stock ticker.');\n      return;\n    }\n    setError('');\n    try {\n      const profileUrl = `https://financialmodelingprep.com/api/v3/profile/${ticker}?apikey=${apiKey}`;\n      const incomeUrl = `https://financialmodelingprep.com/api/v3/income-statement/${ticker}?limit=1&apikey=${apiKey}`;\n      const quoteUrl = `https://financialmodelingprep.com/api/v3/quote/${ticker}?apikey=${apiKey}`;\n\n      const [profileRes, incomeRes, quoteRes] = await Promise.all([\n        axios.get(profileUrl),\n        axios.get(incomeUrl),\n        axios.get(quoteUrl),\n      ]);\n\n      const profile = profileRes.data[0];\n      const income = incomeRes.data[0];\n      const quote = quoteRes.data[0];\n\n      if (profile && income && quote) {\n        setInitialRevenue(income.revenue / 1e9);\n        setInitialMargin((income.netIncome / income.revenue) * 100);\n        setSharesOutstanding(quote.sharesOutstanding / 1e9);\n        setCurrentStockPrice(profile.price);\n        setDividendYield(profile.lastDiv ? (profile.lastDiv / profile.price) * 100 : 0);\n      } else {\n        setError('No data found for this ticker. Check the ticker.');\n      }\n    } catch (err) {\n      setError('Failed to fetch financial data. Check the ticker or API key.');\n      console.error(err);\n    }\n  }, [ticker, apiKey]);\n\n  const calculateData = useCallback(() => {\n    let currentRevenue = parseFloat(initialRevenue) || 0;\n    let currentMargin = parseFloat(initialMargin) || 0;\n    let currentShares = parseFloat(sharesOutstanding) || 0;\n    let currentStockPriceVal = parseFloat(currentStockPrice) || 0; \n\n    const newData = [];\n    const revenuesForCAGR = [];\n    const earningsForCAGR = [];\n    const fairValuesForCAGR = [];\n    let totalDividends = 0;\n\n    const initialEarnings = currentRevenue * (currentMargin / 100);\n    const initialEPS = currentShares > 0 ? initialEarnings / currentShares : 0;\n    const initialEstimatedFairValue = initialEPS * (parseFloat(peRatio) || 0);\n    const initialDividendPerShare = initialEstimatedFairValue * ((parseFloat(dividendYield) || 0) / 100);\n\n    newData.push({\n        year: new Date().getFullYear(),\n        revenue: currentRevenue.toFixed(2),\n        revenueGrowth: 0, \n        earnings: initialEarnings.toFixed(2),\n        earningsGrowth: 0, \n        netMargin: currentMargin.toFixed(2),\n        shares: currentShares.toFixed(2),\n        eps: initialEPS.toFixed(2),\n        dividendPerShare: initialDividendPerShare.toFixed(2),\n        estimatedFairValue: initialEstimatedFairValue.toFixed(2),\n    });\n\n    revenuesForCAGR.push(currentRevenue);\n    earningsForCAGR.push(initialEarnings);\n    fairValuesForCAGR.push(initialEstimatedFairValue); \n\n    let prevRevenue = currentRevenue;\n    let prevEarnings = initialEarnings;\n    let prevShares = currentShares;\n    let prevMargin = currentMargin;\n\n    for (let i = 1; i <= years; i++) { \n        const projectedRevenue = prevRevenue * (1 + (parseFloat(revenueGrowth) || 0) / 100);\n        const projectedMargin = prevMargin * (1 + (parseFloat(marginGrowth) || 0) / 100); \n        const projectedEarnings = projectedRevenue * (projectedMargin / 100);\n        \n        const revenueYoY = ((projectedRevenue / prevRevenue - 1) * 100);\n        const earningsYoY = ((projectedEarnings / prevEarnings - 1) * 100);\n\n        const netMargin = projectedRevenue > 0 ? (projectedEarnings / projectedRevenue) * 100 : 0;\n        const projectedShares = prevShares * (1 + (parseFloat(sharesChange) || 0) / 100);\n        const projectedEPS = projectedShares > 0 ? projectedEarnings / projectedShares : 0;\n        const projectedFairValue = projectedEPS * (parseFloat(peRatio) || 0);\n        const projectedDividendPerShare = projectedFairValue * ((parseFloat(dividendYield) || 0) / 100);\n        totalDividends += projectedDividendPerShare;\n\n        newData.push({\n            year: new Date().getFullYear() + i,\n            revenue: projectedRevenue.toFixed(2),\n            revenueGrowth: revenueYoY.toFixed(2),\n            earnings: projectedEarnings.toFixed(2),\n            earningsGrowth: earningsYoY.toFixed(2),\n            netMargin: netMargin.toFixed(2),\n            shares: projectedShares.toFixed(2),\n            eps: projectedEPS.toFixed(2),\n            dividendPerShare: projectedDividendPerShare.toFixed(2),\n            estimatedFairValue: projectedFairValue.toFixed(2),\n        });\n\n        prevRevenue = projectedRevenue;\n        prevEarnings = projectedEarnings;\n        prevShares = projectedShares;\n        prevMargin = projectedMargin;\n\n        revenuesForCAGR.push(projectedRevenue);\n        earningsForCAGR.push(projectedEarnings);\n        fairValuesForCAGR.push(projectedFairValue);\n    }\n    setData(newData);\n\n    const finalFairValue = parseFloat(newData[newData.length - 1]?.estimatedFairValue) || 0;\n    if (currentStockPriceVal > 0) {\n        const finalValue = finalFairValue + totalDividends;\n        const totalReturn = ((finalValue / currentStockPriceVal) - 1) * 100;\n        const annualizedReturn = (Math.pow(finalValue / currentStockPriceVal, 1 / years) - 1) * 100;\n        setExpectedReturn({ totalReturn, annualizedReturn });\n    } else {\n        setExpectedReturn({ totalReturn: 0, annualizedReturn: 0 });\n    }\n\n    setRevenueCAGR({\n        '1Y': calculateCAGR(revenuesForCAGR, 1),\n        '2Y': calculateCAGR(revenuesForCAGR, 2),\n        '5Y': calculateCAGR(revenuesForCAGR, 5),\n    });\n    setEarningsCAGR({ \n        '1Y': calculateCAGR(earningsForCAGR, 1),\n        '2Y': calculateCAGR(earningsForCAGR, 2),\n        '5Y': calculateCAGR(earningsForCAGR, 5),\n    });\n    setFairValueCAGR({\n        '1Y': calculateCAGR(fairValuesForCAGR, 1),\n        '2Y': calculateCAGR(fairValuesForCAGR, 2),\n        '5Y': calculateCAGR(fairValuesForCAGR, 5),\n    });\n\n  }, [years, initialRevenue, revenueGrowth, initialMargin, marginGrowth, sharesOutstanding, sharesChange, dividendYield, peRatio, currentStockPrice]);\n\n  useEffect(() => {\n    calculateData();\n  }, [calculateData]);\n\n  const getChartDataAndOptions = () => {\n    let chartLabel = '';\n    let chartValues = [];\n    let chartColor = '';\n    let cagrData = {};\n\n    switch (activeChartTab) {\n      case 'revenue':\n        chartLabel = 'Revenue ($B)';\n        chartValues = data.map((d) => parseFloat(d.revenue));\n        chartColor = '#00bfff';\n        cagrData = revenueCAGR;\n        break;\n      case 'earnings':\n        chartLabel = 'Earnings ($B)';\n        chartValues = data.map((d) => parseFloat(d.earnings));\n        chartColor = '#32cd32';\n        cagrData = earningsCAGR;\n        break;\n      case 'fairValue':\n        chartLabel = 'Fair Value ($)';\n        chartValues = data.map((d) => parseFloat(d.estimatedFairValue));\n        chartColor = '#ffdf00';\n        cagrData = fairValueCAGR;\n        break;\n      default:\n        break;\n    }\n\n    const chartData = {\n      labels: data.map((d) => d.year),\n      datasets: [\n        {\n          label: chartLabel,\n          data: chartValues,\n          backgroundColor: chartColor,\n          borderColor: chartColor,\n          borderWidth: 1,\n        },\n      ],\n    };\n\n    const chartOptions = {\n      responsive: true,\n      maintainAspectRatio: false,\n      scales: {\n        y: {\n          beginAtZero: true,\n          ticks: { color: '#ccc' },\n          grid: { color: 'rgba(255, 255, 255, 0.1)' },\n        },\n        x: {\n          ticks: { color: '#ccc' },\n          grid: { color: 'rgba(255, 255, 255, 0.1)' },\n        },\n      },\n      plugins: {\n        legend: { labels: { color: '#fff' } },\n      },\n    };\n\n    return { chartData, chartOptions, cagrData };\n  };\n\n  const { chartData, chartOptions, cagrData } = getChartDataAndOptions();\n\n  return (\n    <div className=\"stock-analyzer\">\n      {/* Header */}\n      <div className=\"sa-header\">\n        <h1>Stock Analyzer</h1>\n        <p>Analyze and project stock performance with advanced financial modeling</p>\n      </div>\n\n      {/* Error Message */}\n      {error && <div className=\"sa-error-message\">{error}</div>}\n\n      {/* Main Content Grid */}\n      <div className=\"sa-main-content\">\n        {/* Left Panel - Inputs */}\n        <div className=\"sa-inputs-panel\">\n          <h2>Investment Parameters</h2>\n          \n          <div className=\"sa-inputs-grid\">\n            <div className=\"sa-input-group\">\n              <label>Stock Ticker</label>\n              <input \n                type=\"text\" \n                value={ticker} \n                onChange={(e) => setTicker(e.target.value.toUpperCase())} \n                placeholder=\"Enter ticker (e.g., AAPL)\"\n              />\n            </div>\n            \n            <div className=\"sa-input-group\">\n              <label>Years</label>\n              <input \n                type=\"number\" \n                value={years} \n                onChange={(e) => setYears(e.target.value)} \n              />\n            </div>\n            \n            <div className=\"sa-input-group\">\n              <label>Revenue ($B)</label>\n              <input \n                type=\"number\" \n                value={initialRevenue} \n                onChange={(e) => setInitialRevenue(e.target.value)} \n              />\n            </div>\n            \n            <div className=\"sa-input-group\">\n              <label>Revenue Growth (%)</label>\n              <input \n                type=\"number\" \n                value={revenueGrowth} \n                onChange={(e) => setRevenueGrowth(e.target.value)} \n              />\n            </div>\n            \n            <div className=\"sa-input-group\">\n              <label>Net Margin (%)</label>\n              <input \n                type=\"number\" \n                value={initialMargin} \n                onChange={(e) => setInitialMargin(e.target.value)} \n              />\n            </div>\n            \n            <div className=\"sa-input-group\">\n              <label>Margin Growth (%)</label>\n              <input \n                type=\"number\" \n                value={marginGrowth} \n                onChange={(e) => setMarginGrowth(e.target.value)} \n              />\n            </div>\n            \n            <div className=\"sa-input-group\">\n              <label>Shares Out. (B)</label>\n              <input \n                type=\"number\" \n                value={sharesOutstanding} \n                onChange={(e) => setSharesOutstanding(e.target.value)} \n              />\n            </div>\n            \n            <div className=\"sa-input-group\">\n              <label>Shares Change (%)</label>\n              <input \n                type=\"number\" \n                value={sharesChange} \n                onChange={(e) => setSharesChange(e.target.value)} \n              />\n            </div>\n            \n            <div className=\"sa-input-group\">\n              <label>Exit P/E Ratio</label>\n              <input \n                type=\"number\" \n                value={peRatio} \n                onChange={(e) => setPeRatio(e.target.value)} \n              />\n            </div>\n            \n            <div className=\"sa-input-group\">\n              <label>Current Stock Price ($)</label>\n              <input \n                type=\"number\" \n                value={currentStockPrice} \n                onChange={(e) => setCurrentStockPrice(e.target.value)} \n              />\n            </div>\n          </div>\n          \n          <div className=\"sa-fetch-button-container\">\n            <button onClick={fetchFinancialData} className=\"sa-fetch-button\">\n              Fetch Data\n            </button>\n          </div>\n        </div>\n\n        {/* Right Panel - Chart */}\n        <div className=\"sa-chart-panel\">\n          <div className=\"sa-chart-tabs\">\n            <button \n              className={activeChartTab === 'revenue' ? 'active' : ''} \n              onClick={() => setActiveChartTab('revenue')}\n            >\n              Revenue\n            </button>\n            <button \n              className={activeChartTab === 'earnings' ? 'active' : ''} \n              onClick={() => setActiveChartTab('earnings')}\n            >\n              Earnings\n            </button>\n            <button \n              className={activeChartTab === 'fairValue' ? 'active' : ''} \n              onClick={() => setActiveChartTab('fairValue')}\n            >\n              Fair Value\n            </button>\n          </div>\n          \n          <div className=\"sa-chart-container\">\n            <Bar data={chartData} options={chartOptions} />\n          </div>\n          \n          <div className=\"sa-cagr-display\">\n            <h4>CAGR:</h4>\n            <div className=\"sa-cagr-values\">\n              <span>1Y: {cagrData['1Y'].toFixed(2)}%</span>\n              <span>2Y: {cagrData['2Y'].toFixed(2)}%</span>\n              <span>5Y: {cagrData['5Y'].toFixed(2)}%</span>\n            </div>\n          </div>\n          \n          <div className=\"sa-return-display\">\n            <h4>Expected Return:</h4>\n            <div className=\"sa-return-values\">\n              <span>Total: {expectedReturn.totalReturn.toFixed(2)}%</span>\n              <span>CAGR: {expectedReturn.annualizedReturn.toFixed(2)}%</span>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {/* Data Table */}\n      <div className=\"sa-table-section\">\n        <h2>Financial Projections</h2>\n        <div className=\"sa-table-container\">\n          <table className=\"sa-table\">\n            <thead>\n              <tr>\n                <th>Metric</th>\n                {data.map((d) => (\n                  <th key={d.year}>{d.year}</th>\n                ))}\n              </tr>\n            </thead>\n            <tbody>\n              <tr>\n                <td>Revenue ($B)</td>\n                {data.map((d, i) => (\n                  <td key={i}>\n                    <span>{d.revenue}</span>\n                  </td>\n                ))}\n              </tr>\n              <tr>\n                <td>Revenue Growth (%)</td>\n                {data.map((d, i) => (\n                  <td key={i}>\n                    <span>{d.revenueGrowth}</span>\n                  </td>\n                ))}\n              </tr>\n              <tr>\n                <td>Earnings ($B)</td>\n                {data.map((d, i) => (\n                  <td key={i}>\n                    <span>{d.earnings}</span>\n                  </td>\n                ))}\n              </tr>\n              <tr>\n                <td>Earnings Growth (%)</td>\n                {data.map((d, i) => (\n                  <td key={i}>\n                    <span>{d.earningsGrowth}</span>\n                  </td>\n                ))}\n              </tr>\n              <tr>\n                <td>Net Margin (%)</td>\n                {data.map((d, i) => (\n                  <td key={i}>\n                    <span>{d.netMargin}</span>\n                  </td>\n                ))}\n              </tr>\n              <tr className=\"sa-separator\">\n                <td colSpan={data.length + 1}></td>\n              </tr>\n              <tr>\n                <td>Shares Outstanding (B)</td>\n                {data.map((d, i) => (\n                  <td key={i}>\n                    <span>{d.shares}</span>\n                  </td>\n                ))}\n              </tr>\n              <tr>\n                <td>Earnings Per Share ($)</td>\n                {data.map((d, i) => (\n                  <td key={i}>\n                    <span>{d.eps}</span>\n                  </td>\n                ))}\n              </tr>\n              <tr>\n                <td>Dividend Per Share ($)</td>\n                {data.map((d, i) => (\n                  <td key={i}>\n                    <span>{d.dividendPerShare}</span>\n                  </td>\n                ))}\n              </tr>\n              <tr>\n                <td>Estimated Fair Value ($)</td>\n                {data.map((d, i) => (\n                  <td key={i}>\n                    <span>{d.estimatedFairValue}</span>\n                  </td>\n                ))}\n              </tr>\n            </tbody>\n          </table>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default StockAnalyzer;"],"names":["ChartJS","register","CategoryScale","LinearScale","BarElement","Title","Tooltip","Legend","StockAnalyzer","apiKey","ticker","setTicker","useState","years","setYears","initialRevenue","setInitialRevenue","revenueGrowth","setRevenueGrowth","initialMargin","setInitialMargin","marginGrowth","setMarginGrowth","sharesOutstanding","setSharesOutstanding","sharesChange","setSharesChange","dividendYield","setDividendYield","peRatio","setPeRatio","currentStockPrice","setCurrentStockPrice","data","setData","expectedReturn","setExpectedReturn","totalReturn","annualizedReturn","error","setError","activeChartTab","setActiveChartTab","revenueCAGR","setRevenueCAGR","earningsCAGR","setEarningsCAGR","fairValueCAGR","setFairValueCAGR","calculateCAGR","values","numYears","length","Math","pow","fetchFinancialData","useCallback","async","profileUrl","concat","incomeUrl","quoteUrl","profileRes","incomeRes","quoteRes","Promise","all","axios","get","profile","income","quote","revenue","netIncome","price","lastDiv","err","console","calculateData","_newData","currentRevenue","parseFloat","currentMargin","currentShares","currentStockPriceVal","newData","revenuesForCAGR","earningsForCAGR","fairValuesForCAGR","totalDividends","initialEarnings","initialEPS","initialEstimatedFairValue","initialDividendPerShare","push","year","Date","getFullYear","toFixed","earnings","earningsGrowth","netMargin","shares","eps","dividendPerShare","estimatedFairValue","prevRevenue","prevEarnings","prevShares","prevMargin","i","projectedRevenue","projectedMargin","projectedEarnings","revenueYoY","earningsYoY","projectedShares","projectedEPS","projectedFairValue","projectedDividendPerShare","finalFairValue","finalValue","useEffect","chartData","chartOptions","cagrData","getChartDataAndOptions","chartLabel","chartValues","chartColor","map","d","labels","datasets","label","backgroundColor","borderColor","borderWidth","responsive","maintainAspectRatio","scales","y","beginAtZero","ticks","color","grid","x","plugins","legend","_jsxs","className","children","_jsx","type","value","onChange","e","target","toUpperCase","placeholder","onClick","Bar","options","colSpan"],"sourceRoot":""}